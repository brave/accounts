definitions:
  controllers.LoginFinalizeRequest:
    description: Request to finalize login
    properties:
      clientMac:
        description: Client MAC of KE3
        type: string
      sessionName:
        description: Optional name for the new session
        type: string
    required:
    - clientMac
    type: object
  controllers.LoginFinalizeResponse:
    description: Response containing auth token after successful login
    properties:
      authToken:
        description: Authentication token for future requests
        type: string
    type: object
  controllers.LoginInitRequest:
    description: Request for account login
    properties:
      blindedMessage:
        description: Blinded message component of KE1
        type: string
      clientEphemeralPublicKey:
        description: Client ephemeral public key of KE1
        type: string
      clientNonce:
        description: Client nonce of KE1
        type: string
      email:
        description: Email address of the account
        example: test@example.com
        type: string
      serializedKE1:
        description: Serialized KE1 message
        type: string
    required:
    - email
    type: object
  controllers.LoginInitResponse:
    description: Response for account login
    properties:
      akeToken:
        description: Interim authentication token for future login finalization
        type: string
      evaluatedMessage:
        description: Evaluated message component of KE2
        type: string
      maskedResponse:
        description: Server masked response of KE2
        type: string
      maskingNonce:
        description: Server masking nonce of KE2
        type: string
      serializedKE2:
        description: Serialized KE2 message
        type: string
      serverEphemeralPublicKey:
        description: Server ephemeral public key of KE2
        type: string
      serverMac:
        description: Server MAC of KE2
        type: string
      serverNonce:
        description: Server nonce of KE2
        type: string
    type: object
  controllers.PasswordFinalizeResponse:
    description: Response for password setup or change
    properties:
      authToken:
        description: Authentication token
        type: string
    type: object
  controllers.RegistrationRecord:
    description: OPAQUE registration record for a new account
    properties:
      envelope:
        description: Envelope of registation record
        type: string
      maskingKey:
        description: Masking key of registation record
        type: string
      publicKey:
        description: Public key of registation record
        type: string
      serializedRecord:
        description: Serialized registration record
        type: string
      sessionName:
        description: Optional name of the new session
        maxLength: 50
        type: string
    type: object
  controllers.RegistrationRequest:
    description: Request to register a new account
    properties:
      blindedMessage:
        description: Serialized OPAQUE registration request
        type: string
      serializeResponse:
        description: Whether to serialize the response into binary/hex
        type: boolean
    required:
    - blindedMessage
    type: object
  controllers.RegistrationResponse:
    description: Response for registering a new account
    properties:
      evaluatedMessage:
        description: Evaluated message of the OPAQUE registration response
        type: string
      pks:
        description: PKS of the OPAQUE registration response
        type: string
      serializedResponse:
        description: Serialized OPAQUE registration response
        type: string
    type: object
  controllers.ValidateTokenResponse:
    description: Response containing validated token details
    properties:
      accountId:
        description: UUID of the account
        type: string
      email:
        description: Email address associated with the account
        type: string
      sessionId:
        description: UUID of the session associated with the account
        type: string
    type: object
  controllers.VerifyCompleteRequest:
    description: Request parameters for verification completion
    properties:
      code:
        description: Verification code sent to user
        type: string
      id:
        description: Unique verification identifier
        type: string
    required:
    - code
    - id
    type: object
  controllers.VerifyInitRequest:
    description: Request to initialize email verification
    properties:
      email:
        description: Email address to verify
        example: test@example.com
        type: string
      intent:
        description: Purpose of verification (e.g., get auth token, simple verification,
          registration)
        enum:
        - auth_token
        - verification
        - registration
        - reset
        - change_password
        example: registration
        type: string
      language:
        description: Locale for verification email
        example: en-US
        maxLength: 8
        type: string
      service:
        description: Service requesting the verification
        enum:
        - accounts
        - premium
        - inbox-aliases
        example: accounts
        type: string
    required:
    - email
    - intent
    - service
    type: object
  controllers.VerifyInitResponse:
    description: Response containing verification check token
    properties:
      verificationToken:
        description: JWT token for checking verification status
        type: string
    type: object
  controllers.VerifyResultRequest:
    description: Request for getting auth token after verification
    properties:
      wait:
        description: Whether to wait for verification to complete
        type: boolean
    type: object
  controllers.VerifyResultResponse:
    description: Response containing auth token
    properties:
      authToken:
        description: JWT auth token, null if verification incomplete or if password
          setup is required
        type: string
      email:
        description: Email associated wiith the verification
        type: string
      serviceName:
        description: Name of service requesting verification
        type: string
      verified:
        description: Email verification status
        type: boolean
    type: object
  datastore.Session:
    properties:
      createdAt:
        description: Session creation timestamp
        type: string
      id:
        description: Session UUID
        type: string
      userAgent:
        description: User agent of client
        type: string
    type: object
  util.ErrorResponse:
    description: Standard error response
    properties:
      error:
        description: Error message
        type: string
      status:
        description: HTTP status code
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact: {}
  title: Brave Accounts Service
paths:
  /v2/accounts/password/finalize:
    post:
      consumes:
      - application/json
      description: |-
        Complete the password setup process and return auth token.
        Either `publicKey`, `maskingKey` and `envelope` must be provided together,
        or `serializedRecord` must be provided.
      parameters:
      - description: Bearer + verification token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Registration record
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegistrationRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PasswordFinalizeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Finalize password setup
      tags:
      - Accounts
  /v2/accounts/password/init:
    post:
      consumes:
      - application/json
      description: |-
        Start the password setup process using OPAQUE protocol.
        If `serializeResponse` is set to true, the `serializedResponse` field will be populated
        in the response, with other fields omitted.
      parameters:
      - description: Bearer + verification token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.RegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Initialize password setup
      tags:
      - Accounts
  /v2/auth/login/finalize:
    post:
      consumes:
      - application/json
      description: Final step of login flow, verifies KE3 message and creates session.
      parameters:
      - description: Bearer + ake token
        in: header
        name: Authorization
        required: true
        type: string
      - description: login finalize request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginFinalizeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginFinalizeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Finalize login
      tags:
      - Auth
  /v2/auth/login/init:
    post:
      consumes:
      - application/json
      description: |-
        First step of OPAQUE login flow, generates KE2 message.
        Either `blindedMessage`, `clientEphemeralPublicKey` and `clientNonce` must be provided together,
        or `serializedKE1` must be provided.
        If the latter is provided, `serializedKE2` will be included in the response with other
        KE2 fields omitted.
      parameters:
      - description: login init request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginInitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Initialize login
      tags:
      - Auth
  /v2/auth/validate:
    get:
      description: Validates an auth token and returns session details
      parameters:
      - description: Bearer + auth token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ValidateTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Validate auth token
      tags:
      - Auth
  /v2/sessions:
    get:
      description: Lists all active sessions for the authenticated account
      parameters:
      - description: Bearer + auth token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/datastore.Session'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List sessions
      tags:
      - Sessions
  /v2/sessions/{id}:
    delete:
      description: Deletes a specific session by ID
      parameters:
      - description: Bearer + auth token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Session ID (UUID)
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete session / log out
      tags:
      - Sessions
  /v2/verify/complete:
    post:
      consumes:
      - application/json
      description: Completes the email verification process
      parameters:
      - description: Verify completion params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyCompleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Email verification successful
        "400":
          description: Missing/invalid verification parameters
          schema:
            type: string
        "404":
          description: Verification not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Complete email verification
      tags:
      - Email verification
  /v2/verify/complete_fe:
    get:
      description: Returns the HTML page for completing email verification
      produces:
      - text/html
      responses:
        "200":
          description: HTML content
          schema:
            type: string
      summary: Display default verification completion frontend
      tags:
      - Email verification
  /v2/verify/init:
    post:
      consumes:
      - application/json
      description: |-
        Starts email verification process by sending a verification email
        One of the following intents must be provided with the request:
        - `auth_token`: After verification, create an account if one does not exist, and generate an auth token. The token will be available via the "query result" endpoint.
        - `verification`: After verification, do not create an account, but indicate that the email was verified in the "query result" response. Do not allow registration after verification.
        - `registration`: After verification, indicate that the email was verified in the "query result" response. An account may be created by setting a password.
        - `reset`: After verification, indicate that the email was verified in the "query result" response. A password may be set for the existing account.
        - `change_password`: After verification, indicate that the email was verified in the "query result" response. A password may be set for the existing account.

        One of the following service names must be provided with the request: `inbox-aliases`, `accounts`, `premium`.
      parameters:
      - description: Verification request params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyInitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.VerifyInitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Initialize email verification
      tags:
      - Email verification
  /v2/verify/result:
    post:
      consumes:
      - application/json
      description: |-
        Provides the status of a pending or successful verification.
        If the wait option is set to true, the server will up to 20 seconds for verification. Feel free
        to call this endpoint repeatedly to wait for verification.
      parameters:
      - description: Bearer + verification token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Auth token request params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyResultRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.VerifyResultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Query result of verification
      tags:
      - Email verification
swagger: "2.0"
