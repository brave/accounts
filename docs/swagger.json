{
    "swagger": "2.0",
    "info": {
        "title": "Brave Accounts Service",
        "contact": {}
    },
    "paths": {
        "/v2/accounts": {
            "delete": {
                "description": "Deletes the authenticated account and all associated data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Delete account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/accounts/password/finalize": {
            "post": {
                "description": "Complete the password setup process and return auth token.\nEither `publicKey`, `maskingKey` and `envelope` must be provided together,\nor `serializedRecord` must be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Finalize password setup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + verification token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "Registration record",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegistrationRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PasswordFinalizeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/accounts/password/init": {
            "post": {
                "description": "Start the password setup process using OPAQUE protocol.\nIf `serializeResponse` is set to true, the `serializedResponse` field will be populated\nin the response, with other fields omitted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Initialize password setup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + verification token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "Registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.RegistrationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/auth/login/finalize": {
            "post": {
                "description": "Final step of login flow, verifies KE3 message and creates session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Finalize login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + ake token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "login finalize request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginFinalizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginFinalizeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/auth/login/init": {
            "post": {
                "description": "First step of OPAQUE login flow, generates KE2 message.\nEither `blindedMessage`, `clientEphemeralPublicKey` and `clientNonce` must be provided together,\nor `serializedKE1` must be provided.\nIf the latter is provided, `serializedKE2` will be included in the response with other\nKE2 fields omitted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Initialize login",
                "parameters": [
                    {
                        "description": "login init request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginInitRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginInitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/auth/validate": {
            "get": {
                "description": "Validates an auth token and returns session details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Validate auth token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ValidateTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/keys": {
            "get": {
                "description": "Get all keys for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User keys"
                ],
                "summary": "List user keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.UserKey"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Save a new key or update existing key for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User keys"
                ],
                "summary": "Save user key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "Key to save",
                        "name": "key",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UserKeyStoreRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Key saved"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/keys/{name}": {
            "get": {
                "description": "Get a specific key by name for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User keys"
                ],
                "summary": "Get user key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Key name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserKey"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/sessions": {
            "get": {
                "description": "Lists all active sessions for the authenticated account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "List sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/datastore.Session"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/sessions/{id}": {
            "delete": {
                "description": "Deletes a specific session by ID",
                "tags": [
                    "Sessions"
                ],
                "summary": "Delete session / log out",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + auth token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/verify/complete": {
            "post": {
                "description": "Completes the email verification process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email verification"
                ],
                "summary": "Complete email verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "Verify completion params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyCompleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyCompleteResponse"
                        }
                    },
                    "400": {
                        "description": "Missing/invalid verification parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Verification not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/verify/complete_fe": {
            "get": {
                "description": "Returns the HTML page for completing email verification",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Debugging"
                ],
                "summary": "Display default verification completion frontend",
                "responses": {
                    "200": {
                        "description": "HTML content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/verify/email_viewer": {
            "get": {
                "description": "Retrieves and displays emails sent through LocalStack SES endpoint",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Debugging"
                ],
                "summary": "View sent emails in LocalStack SES",
                "responses": {
                    "200": {
                        "description": "HTML page displaying emails",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/verify/init": {
            "post": {
                "description": "Starts email verification process by sending a verification email\nOne of the following intents must be provided with the request:\n- `auth_token`: After verification, create an account if one does not exist, and generate an auth token. The token will be available via the \"query result\" endpoint.\n- `verification`: After verification, do not create an account, but indicate that the email was verified in the \"query result\" response. Do not allow registration after verification.\n- `registration`: After verification, indicate that the email was verified in the \"query result\" response. An account may be created by setting a password.\n- `set_password`: After verification, indicate that the email was verified in the \"query result\" response. A password may be set for the existing account.\n\nOne of the following service names must be provided with the request: `inbox-aliases`, `accounts`, `premium`.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email verification"
                ],
                "summary": "Initialize email verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "Verification request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyInitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyInitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v2/verify/result": {
            "post": {
                "description": "Provides the status of a pending or successful verification.\nIf the wait option is set to true, the server will up to 20 seconds for verification. Feel free\nto call this endpoint repeatedly to wait for verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email verification"
                ],
                "summary": "Query result of verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer + verification token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brave services key (if one is configured)",
                        "name": "Brave-Key",
                        "in": "header"
                    },
                    {
                        "description": "Auth token request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyResultRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyResultResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.LoginFinalizeRequest": {
            "description": "Request to finalize login",
            "type": "object",
            "required": [
                "clientMac"
            ],
            "properties": {
                "clientMac": {
                    "description": "Client MAC of KE3",
                    "type": "string"
                },
                "sessionName": {
                    "description": "Optional name for the new session",
                    "type": "string"
                }
            }
        },
        "controllers.LoginFinalizeResponse": {
            "description": "Response containing auth token after successful login",
            "type": "object",
            "properties": {
                "authToken": {
                    "description": "Authentication token for future requests",
                    "type": "string"
                }
            }
        },
        "controllers.LoginInitRequest": {
            "description": "Request for account login",
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "blindedMessage": {
                    "description": "Blinded message component of KE1",
                    "type": "string"
                },
                "clientEphemeralPublicKey": {
                    "description": "Client ephemeral public key of KE1",
                    "type": "string"
                },
                "clientNonce": {
                    "description": "Client nonce of KE1",
                    "type": "string"
                },
                "email": {
                    "description": "Email address of the account",
                    "type": "string",
                    "example": "test@example.com"
                },
                "serializedKE1": {
                    "description": "Serialized KE1 message",
                    "type": "string"
                }
            }
        },
        "controllers.LoginInitResponse": {
            "description": "Response for account login",
            "type": "object",
            "properties": {
                "akeToken": {
                    "description": "Interim authentication token for future login finalization",
                    "type": "string"
                },
                "evaluatedMessage": {
                    "description": "Evaluated message component of KE2",
                    "type": "string"
                },
                "maskedResponse": {
                    "description": "Server masked response of KE2",
                    "type": "string"
                },
                "maskingNonce": {
                    "description": "Server masking nonce of KE2",
                    "type": "string"
                },
                "serializedKE2": {
                    "description": "Serialized KE2 message",
                    "type": "string"
                },
                "serverEphemeralPublicKey": {
                    "description": "Server ephemeral public key of KE2",
                    "type": "string"
                },
                "serverMac": {
                    "description": "Server MAC of KE2",
                    "type": "string"
                },
                "serverNonce": {
                    "description": "Server nonce of KE2",
                    "type": "string"
                }
            }
        },
        "controllers.PasswordFinalizeResponse": {
            "description": "Response for password setup or change",
            "type": "object",
            "properties": {
                "authToken": {
                    "description": "Authentication token",
                    "type": "string"
                }
            }
        },
        "controllers.RegistrationRecord": {
            "description": "OPAQUE registration record for a new account",
            "type": "object",
            "properties": {
                "envelope": {
                    "description": "Envelope of registation record",
                    "type": "string"
                },
                "maskingKey": {
                    "description": "Masking key of registation record",
                    "type": "string"
                },
                "publicKey": {
                    "description": "Public key of registation record",
                    "type": "string"
                },
                "serializedRecord": {
                    "description": "Serialized registration record",
                    "type": "string"
                },
                "sessionName": {
                    "description": "Optional name of the new session",
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "controllers.RegistrationRequest": {
            "description": "Request to register a new account",
            "type": "object",
            "required": [
                "blindedMessage"
            ],
            "properties": {
                "blindedMessage": {
                    "description": "Serialized OPAQUE registration request",
                    "type": "string"
                },
                "serializeResponse": {
                    "description": "Whether to serialize the response into binary/hex",
                    "type": "boolean"
                }
            }
        },
        "controllers.RegistrationResponse": {
            "description": "Response for registering a new account",
            "type": "object",
            "properties": {
                "evaluatedMessage": {
                    "description": "Evaluated message of the OPAQUE registration response",
                    "type": "string"
                },
                "pks": {
                    "description": "PKS of the OPAQUE registration response",
                    "type": "string"
                },
                "serializedResponse": {
                    "description": "Serialized OPAQUE registration response",
                    "type": "string"
                }
            }
        },
        "controllers.UserKey": {
            "type": "object",
            "properties": {
                "encryptedKey": {
                    "description": "EncryptedKey contains the encrypted key data as hex bytes",
                    "type": "string"
                },
                "name": {
                    "description": "Name identifies the type of key (wrapping_key or sync_enc_seed)",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt is the timestamp when the key was last updated",
                    "type": "string"
                }
            }
        },
        "controllers.UserKeyStoreRequest": {
            "type": "object",
            "required": [
                "encryptedKey",
                "name"
            ],
            "properties": {
                "encryptedKey": {
                    "description": "EncryptedKey contains the encrypted key data as hex bytes",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 16
                },
                "name": {
                    "description": "Name identifies the type of key (wrapping_key or sync_enc_seed)",
                    "type": "string",
                    "enum": [
                        "wrapping_key",
                        "sync_enc_seed"
                    ]
                }
            }
        },
        "controllers.ValidateTokenResponse": {
            "description": "Response containing validated token details",
            "type": "object",
            "properties": {
                "accountId": {
                    "description": "UUID of the account",
                    "type": "string"
                },
                "email": {
                    "description": "Email address associated with the account",
                    "type": "string"
                },
                "sessionId": {
                    "description": "UUID of the session associated with the account",
                    "type": "string"
                }
            }
        },
        "controllers.VerifyCompleteRequest": {
            "description": "Request parameters for verification completion",
            "type": "object",
            "required": [
                "code",
                "id"
            ],
            "properties": {
                "code": {
                    "description": "Verification code sent to user",
                    "type": "string"
                },
                "id": {
                    "description": "Unique verification identifier",
                    "type": "string"
                }
            }
        },
        "controllers.VerifyCompleteResponse": {
            "description": "Response for verification completion",
            "type": "object",
            "properties": {
                "service": {
                    "description": "Name of service requesting verification",
                    "type": "string"
                },
                "verificationToken": {
                    "description": "JWT token for checking verification status",
                    "type": "string"
                }
            }
        },
        "controllers.VerifyInitRequest": {
            "description": "Request to initialize email verification",
            "type": "object",
            "required": [
                "email",
                "intent",
                "service"
            ],
            "properties": {
                "email": {
                    "description": "Email address to verify",
                    "type": "string",
                    "example": "test@example.com"
                },
                "intent": {
                    "description": "Purpose of verification (e.g., get auth token, simple verification, registration)",
                    "type": "string",
                    "enum": [
                        "auth_token",
                        "verification",
                        "registration",
                        "set_password"
                    ],
                    "example": "registration"
                },
                "language": {
                    "description": "Locale for verification email",
                    "type": "string",
                    "maxLength": 8,
                    "example": "en-US"
                },
                "service": {
                    "description": "Service requesting the verification",
                    "type": "string",
                    "enum": [
                        "accounts",
                        "premium",
                        "inbox-aliases"
                    ],
                    "example": "accounts"
                }
            }
        },
        "controllers.VerifyInitResponse": {
            "description": "Response containing verification check token",
            "type": "object",
            "properties": {
                "verificationToken": {
                    "description": "JWT token for checking verification status",
                    "type": "string"
                }
            }
        },
        "controllers.VerifyResultRequest": {
            "description": "Request for getting auth token after verification",
            "type": "object",
            "properties": {
                "wait": {
                    "description": "Whether to wait for verification to complete",
                    "type": "boolean"
                }
            }
        },
        "controllers.VerifyResultResponse": {
            "description": "Response containing auth token",
            "type": "object",
            "properties": {
                "authToken": {
                    "description": "JWT auth token, null if verification incomplete or if password setup is required",
                    "type": "string"
                },
                "email": {
                    "description": "Email associated wiith the verification",
                    "type": "string"
                },
                "service": {
                    "description": "Name of service requesting verification",
                    "type": "string"
                },
                "verified": {
                    "description": "Email verification status",
                    "type": "boolean"
                }
            }
        },
        "datastore.Session": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Session creation timestamp",
                    "type": "string"
                },
                "id": {
                    "description": "Session UUID",
                    "type": "string"
                },
                "userAgent": {
                    "description": "User agent of client",
                    "type": "string"
                }
            }
        },
        "util.ErrorResponse": {
            "description": "Standard error response",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer"
                },
                "error": {
                    "description": "Error message",
                    "type": "string"
                },
                "status": {
                    "description": "HTTP status code",
                    "type": "integer"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}